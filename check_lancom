#!/bin/bash

##
# 2021-09-02:  Version 1.0	\\ Pit Wenkin
##

hostname=""
warning="1"
critical="10"


SNMPVersion="2c"
SNMPCommunity="public"
SNMPTimeout="10"
SNMPPort="161"

OID_ALLAPS=".1.3.6.1.4.1.2356.11.1.73.5.0"
OID_APSUP=".1.3.6.1.4.1.2356.11.1.73.6.0"

ALLAPS=0
APSDOWN=0
APSUP=0

# nagios return values
export STATE_OK=0
export STATE_WARNING=1
export STATE_CRITICAL=2
export STATE_UNKNOWN=3
export STATE_DEPENDENT=4

intReturn=$STATE_OK

usage()
{
        echo "usage: ./check_lancom -h [hostname] -c [community] -p [port] -t [timeout] -W [warning] -C [critical]"
        echo "options:"
        echo "            -h [hostname]"
        echo "            -c [SNMPv2 community name]	(default is public)"
        echo "            -p [port]			(default is 161)"
        echo "            -t [timeout]			(default is 10 seconds)"
        echo "            -W [warning]  Percentage of accesspoints which have to be down to return a warning message (default is 1)"
        echo "            -C [critical] Percentage of accesspoints which have to be down to return a critical message (default is 10)"
        echo ""
        echo "examples: ./check_wc -c private -p 1234 -h nas.intranet"
        echo "          ./check_wc -c private -p 1234 -h nas.intranet -W 5 -C 10"
        exit 3
}

while getopts 2:c:p:h:C:t:W: OPTNAME; do
        case "$OPTNAME" in
        p)      SNMPPort="$OPTARG";;
        h)      hostname="$OPTARG";;
        c)      SNMPCommunity="$OPTARG";;
        C)      critical="$OPTARG";;
        t)      SNMPTimeout="$OPTARG";;
        W)      warning="$OPTARG";;
        esac
done

if [ "$hostname" = "" ] || [ "$SNMPCommunity" = "" ] ; then
    usage
else

	SNMPArgs=" -OQne -v $SNMPVersion -c $SNMPCommunity -t $SNMPTimeout $hostname:$SNMPPort"
	
	info=`snmpget $SNMPArgs $OID_ALLAPS $OID_APSUP 2> /dev/null`
	
	if [ "$?" != "0" ] ; then
		output="CRITICAL - Problem with SNMP request, check user/password/host"
		intReturn=$STATE_CRITICAL;
	else
		ALLAPS=$(echo "$info" | grep $OID_ALLAPS | sed 's/.* = //g' | sed 's/"//g')
		APSUP=$(echo "$info" | grep $OID_APSUP | sed 's/.* = //g' | sed 's/"//g')
		APSDOWN=`expr $ALLAPS - $APSUP`
		if [ "$APSDOWN" -gt "0" ] ; then
			hundred=`expr 100 '*' "$APSUP"`
			percent=`expr $hundred / $ALLAPS`
			percent=${percent%.*}
			if [ "$percent" -gt "$critical" ] ; then
				output="CRITCAL - $APSDOWN accesspoints are down / $APSUP accesspoints are up"
				intReturn=$STATE_CRITICAL;
			else
				if [ "$percent" -gt "$warning" ] ; then
					output="WARNING - $APSDOWN accesspoints are down / $APSUP accesspoints are up"
					intReturn=$STATE_WARNING;
				else
					output="OK - $APSDOWN accesspoints are down / $APSUP accesspoints are up"
					intReturn=$STATE_OK
				fi
			fi
		fi

		if [ "$APSDOWN" = "0" ] ; then
			output="OK - $APSUP accesspoints are up"
			intReturn=$STATE_OK
		fi
    fi
	echo -e $output
	exit $intReturn
fi
